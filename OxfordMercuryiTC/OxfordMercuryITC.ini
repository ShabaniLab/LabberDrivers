# Instrument driver configuration file.

[General settings]

# The name is shown in all the configuration windows
name: Oxford Mercury iTC

# The version string should be updated whenever changes are made to this config file
version: 0.1

# Name of folder containing the code defining a custom driver. Do not define this item
# or leave it blank for any standard driver based on the built-in VISA interface.
driver_path: OxfordMercuryITC


[Model and options]
# The option section allow instruments with different options to use the same driver

# Check instrument model id at startup (True or False). Default is False
check_model: False



# General VISA settings for the instrument.
[VISA settings]

# Enable or disable communication over the VISA protocol (True or False)
# If False, the driver will not perform any operations (unless there is a custom driver).
use_visa = True

# Reset the interface (not the instrument) at startup (True or False).  Default is False
reset: False

# Time (in seconds) before the timing out while waiting for an instrument response. Default is 5
timeout: 5

term_char: LF

baud_rate: 9600

data_bits: 8

stop_bits: 1

tcpip_specify_port: True

tcpip_port: 7020

# Query instrument errors (True or False).  If True, every command sent to the device will
# be followed by an error query.  This is useful when testing new setups, but may degrade
# performance by slowing down the instrument communication.
query_instr_errors: False

# Bit mask for checking status byte errors (default is 255, include all errors)
# The bits signal the following errors:
# 0: Operation
# 1: Request control
# 2: Query error
# 3: Device error
# 4: Execution error
# 5: Command error
# 6: User request
# 7: Power on
error_bit_mask: 255

# SCPI string to be used when querying for instrument error messages
error_cmd:

# Initialization commands are sent to the instrument when starting the driver
# *RST will reset the device, *CLS clears the interface
init:

# Final commands sent to the instrument when closing the driver
final:


# Define quantities in sections. The section name should be the same as the "name" value
# The following keywords are allowed:
#   name:          Quantity name
#   unit:          Quantity unit
#   enabled:	   Determines wether the control is enabled from start.  Default is True
#   datatype:      The data type should be one of DOUBLE, BOOLEAN, COMBO or STRING
#   def_value:     Default value
#   low_lim:       Lowest allowable value.  Defaults to -INF
#   high_lim:      Highest allowable values.  Defaults to +INF
#   combo_def_1:   First option in a pull-down combo box. Only used when datatype=COMBO
#   combo_def_2:   Second option in a pull-down combo box. Only used when datatype=COMBO
#   ...
#   combo_def_n:   nth option in a pull-down combo box. Only used when datatype=COMBO
#   group:         Name of the group where the control belongs.
#   state_quant:   Quantity that determines this control's visibility
#   state_value_1: Value of "state_quant" for which the control is visible
#   state_value_2: Value of "state_quant" for which the control is visible
#   ...
#   state_value_n: Value of "state_quant" for which the control is visible
#   permission:    Sets read/writability, options are BOTH, READ, WRITE or NONE. Default is BOTH
#   set_cmd:       Command used to send data to the instrument. Put <*> where the value should appear.
#   get_cmd:       Command used to get the data from the instrument. Default is set_cmd?
#   sweep_cmd:     Command used to sweep data. Use <sr> for sweep rate, <st> for sweep time, and <*> for the value.
#   sweep_res:     Attainable resolution when sweeping an instrument
#   stop_cmd:      Command used to stop a sweep


[Sensor1.MeasuredTemperature]
datatype: DOUBLE
permission: READ
unit: K
get_cmd: READ:DEV:MB1.T1:TEMP:SIG:TEMP
group: Sensor1

[Sensor1.TargetTemperature]
datatype: DOUBLE
unit: K
low_lim: 0
high_lim: 2000
get_cmd: READ:DEV:MB1.T1:TEMP:LOOP:TSET
set_cmd: SET:DEV:MB1.T1:TEMP:LOOP:TSET:
group: Sensor1

[Sensor1.AutoHeaterControl]
datatype: COMBO
get_cmd: READ:DEV:MB1.T1:TEMP:LOOP:ENAB
set_cmd: SET:DEV:MB1.T1:TEMP:LOOP:ENAB:
combo_def_1: Manual
combo_def_2: Auto
cmd_def_1: OFF
cmd_def_2: ON
group: Sensor1

[Sensor2.MeasuredTemperature]
datatype: DOUBLE
permission: READ
unit: K
get_cmd: READ:DEV:DB8.T1:TEMP:SIG:TEMP
group: Sensor2

[Sensor2.TargetTemperature]
datatype: DOUBLE
unit: K
low_lim: 0
high_lim: 2000
get_cmd: READ:DEV:DB8.T1:TEMP:LOOP:TSET
set_cmd: SET:DEV:DB8.T1:TEMP:LOOP:TSET:
group: Sensor2

[Sensor2.HeaterControl]
datatype: COMBO
get_cmd: READ:DEV:DB8.T1:TEMP:LOOP:ENAB
set_cmd: SET:DEV:DB8.T1:TEMP:LOOP:ENAB:
combo_def_1: Manual
combo_def_2: Auto
cmd_def_1: OFF
cmd_def_2: ON
group: Sensor2

[MeasuredPressure]
datatype: DOUBLE
permission: READ
unit: mB
get_cmd: READ:DEV:DB5.P1:PRES:SIG:PRES

[TargetPressure]
datatype: DOUBLE
unit: mB
get_cmd: READ:DEV:DB5.P1:PRES:LOOP:PRST
set_cmd: SET:DEV:DB5.P1:PRES:LOOP:PRST:

[ValveOpenPercentage]
datatype: DOUBLE
permission: READ
unit: %
get_cmd: READ:DEV:DB4.G1:AUX:SIG:PERC

[PressureControl]
datatype: COMBO
get_cmd: READ:DEV:DB5.P1:PRES:LOOP:FAUT
set_cmd: SET:DEV:DB5.P1:PRES:LOOP:FAUT:
combo_def_1: Manual
combo_def_2: Auto
cmd_def_1: OFF
cmd_def_2: ON
